#!/usr/bin/env python
import os
import sys
import select
import time

from groundstation import logger
log = logger.getLogger("stationd")

from groundstation import settings

from groundstation.station import Station
from groundstation.broadcast_discoverer import BroadcastDiscoverer
from groundstation.broadcast_announcer import BroadcastAnnouncer
from groundstation.stream_listener import StreamListener
from groundstation.node import Node
from groundstation.peer_socket import PeerSocket

from os.path import expanduser

PORT = settings.PORT
BEACON_TIMEOUT = settings.BEACON_TIMEOUT

myself = Node()

station_path = expanduser("~/.groundstation")
station = Station(station_path)

discoverer = BroadcastDiscoverer(PORT)
announcer  = BroadcastAnnouncer(PORT)
listener   = StreamListener(PORT)
announcer.name = myself.name

sockets = [discoverer, listener]
peer_sockets = []

last_beacon = time.time() - BEACON_TIMEOUT # Gaurantee that we'll announce on the first run

def _read_sockets():
    read_sockets = []
    for i in sockets: read_sockets.append(i)
    for i in peer_sockets: read_sockets.append(i)
    return read_sockets

def _write_sockets():
    write_sockets = []
    for i in peer_sockets:
        if i.has_data_ready():
            write_sockets.append(i)
    return write_sockets

while True:
    if time.time() > (last_beacon + BEACON_TIMEOUT):
        last_beacon = time.time()
        announcer.ping()

    log.info("Blocking on sockets for up to %is" % (BEACON_TIMEOUT))
    (sread, swrite, sexc) = select.select(_read_sockets(), _write_sockets(), [], BEACON_TIMEOUT)
    log.info("Got %i ready fds" % len(sread))

    for i in sread:
        if i == discoverer:
            # TODO Return Event objects instead of raw data
            data, peer = discoverer.recv(1024)
            event_type, event_payload = data.split(" ", 1)
            if event_payload != "None" and event_payload != myself.name:
                log.info("Got %s from %s" % (data, repr(peer)))
            else:
                log.info("Discarding %s from myself" % (data))
        elif i == listener:
            peer = listener.accept()
            peer_sockets.append(peer)
        elif isinstance(i, PeerSocket):
            data = i.recv()
            i.enqueue("%s" % data)

    for i in swrite:
        if isinstance(i, PeerSocket):
            i.send()

        # else: # Right now that's the only socket
