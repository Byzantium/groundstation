#!/usr/bin/env python
import os
import sys

import argparse
import github

from groundstation.station import Station
from groundstation.node import Node

from groundstation.objects.root_object import RootObject
from groundstation.objects.update_object import UpdateObject

from groundstation.protocols import github as github_protocol

class NoGithubToken(Exception): pass

class NoUserId(Exception): pass


def _create_option_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--repo", dest='repo', action='store')
    return parser


def _create_station():
    station_path = os.path.expanduser("~/.groundstation")
    myself = Node()
    station = Station(station_path, myself)
    return station

def main(argv):
    if "GITHUB_TOKEN" not in os.environ:
        raise NoGithubToken()

    if "USER_ID" not in os.environ:
        raise NoUserId()

    parser = _create_option_parser()
    station = _create_station()

    args = parser.parse_args(argv[1:])
    gh = github.Github(os.getenv("GITHUB_TOKEN"))
    user = os.getenv("USER_ID")

    repo = gh.get_repo(args.repo)

    for issue in repo.get_issues():
        issue_id = "%s/issue_%d" % (args.repo, issue.id)
        # XXX Is including a user token actually sane? github:user/repo ought to be uniquely identifying
        channel  = "%s:github:%s" % (user, args.repo)
        protocol = github_protocol._identifier_
        root_object = RootObject(issue_id, channel, protocol)
        root_object_oid = station.write(root_object.as_object())
        station.update_ref(channel, issue_id, [root_object_oid])

if __name__ == "__main__":
    main(sys.argv)

    # def __init__(self, id, channel, protocol):
